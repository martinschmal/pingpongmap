<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" />
  <title>Variable label placement</title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />

  {{!-- mapbox version --}}
  <script src="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css" rel="stylesheet" />

  {{!-- mapbox geocoder --}}
  <link rel='stylesheet'
    href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css'
    type='text/css' />
  <script
    src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js'></script>

  </script>

  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #b1eced;
      color: #112933;
    }

    #map-container {
      position: relative;
    }

    #map {
      position: relative;
      height: 90vh;
      width: 100%;
      border-radius: 5px;
    }

    .mapboxgl-popup {
      max-width: 200px;
      min-width: 200px;
      align-content: left;
    }

    .mapboxgl-popup-content {
      text-align: center;
      background-color: #b1eced;
      color: #112933;
      border-radius: 5px;
    }

    .marker {
      background-image: url("https://images.unsplash.com/photo-1564518440696-ef272968778e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80");
      background-size: cover;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      cursor: pointer;
    }

    }
  </style>
</head>

<body>
  <div id="map-container">
    <div id="map">

      <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoibWFydGluc2NobWFsIiwiYSI6ImNrNmdieXk3YjAybmczb3A4cHUzc3hwMW8ifQ.HJsmN70OKsx6AWO-t2056Q';

        var places = {{{ tableLocation }}};
        /// console.log(places);

        var map = new mapboxgl.Map({
          container: 'map',
          style: "mapbox://styles/martinschmal/ck6kpbf5p0yjt1ilt49h2bjxj",
          //style: "mapbox://styles/martinschmal/ck6jmyrxj0e1b1io07re9v86j",
          center: [13.42, 52.49],
          zoom: 10
        });


        map.on('load', function () {

          map.addSource('points', {
            'type': 'geojson',
            'data': places
          });

          //// Adding Locations to map
          map.addLayer({
            'id': 'points',
            'type': 'symbol',
            'source': 'points',
            'points': {
              'fill-color': '#f08',
              'fill-opacity': 0.4
            },
            'layout': {
              // get the icon name from the source's "icon" property
              // concatenate the name to get an icon from the style's sprite sheet
              'icon-image': ['concat', ['get', 'marker-symbol'], '-15'],
              //'icon-image': 'marker',
              // get the title name from the source's "title" property
              //'text-field': ['get', 'Name'],
              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
              'text-offset': [0, 0.6],
              'text-anchor': 'top',
              'icon-allow-overlap': true
            }

          });

          // Create a popup, but don't add it to the map yet.
          var popup = new mapboxgl.Popup({
            closeButton: true,
            closeOnClick: true
          });

          map.on('mouseenter', 'points', function (e) {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            // Variable we want to show in the pop up
            var coordinates = e.features[0].geometry.coordinates.slice();  //console.log("coor>>> " + coordinates);
            var description = e.features[0].properties.Name; //console.log("des>>> " + description);
            var tableImage = e.features[0].properties.table_image; //console.log("image>>> " + tableImage);
            var games_played = e.features[0].properties.games_played;
            var table_id = e.features[0].properties.table_id;
            var occupied = e.features[0].properties.occupied;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            let batImage = "https://images.unsplash.com/photo-1564518440696-ef272968778e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80"

            // define pop-up card and concatenate routes

            let innerHTML;

            if (occupied == true) {
              innerHTML = '<div class="header"><div style="background-image: url('
                + tableImage + '); background-size: cover; background-position: center; width: 90px; height: 90px; border-radius: 5px"></div>'
                + "<p>Games played:" + games_played + '<p></p><button type="button" class="btn btn-secondary">Details</button></a><a href="/tables/tableCheckIn/' + table_id
                + '"> <button type="button" class="btn btn-warning">Check-out</button></p >'
            } else {
              innerHTML = '<div class="header"><div style="background-image: url('
                + tableImage + '); background-size: cover; background-position: center; width: 90px; height: 90px; border-radius: 5px"></div>'
                + "<p>Games played:" + games_played + '<p></p><button type="button" class="btn btn-secondary">Details</button></a><a href="/tables/tableCheckIn/' + table_id
                + '"> <button type="button" class="btn btn-info">Edit Table</button></a><p></p><a href="/tables/edit/' + table_id
                + '"> <button type="button" class="btn btn-success">Check-in!</button></p >'
            }

            // Populate the popup and set its coordinates based on the features
            popup
              .setLngLat(coordinates)
              .setHTML(innerHTML)
              .addTo(map);
          });

          map.addControl(new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl, // Set the mapbox-gl instance
            marker: false, // Do not use the default marker style
            placeholder: 'Search for places in Berlin', // Placeholder text for the search bar
            bbox: [13.0882097323, 52.3418234221, 13.7606105539, 52.6697240587], // Boundary for Berkeley
            proximity: {
              longitude: 13.42,
              latitude: 52.49
            }
          }));

          map.on('mouseleave', 'places', function () {
            map.getCanvas().style.cursor = '';
            popup.remove();
          });

          //navigation
          map.addControl(
            new mapboxgl.NavigationControl()
          );

          map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
              enableHighAccuracy: true
            },
            trackUserLocation: true
          }));

        });
      </script>
    </div>
  </div>

</body>

</html>